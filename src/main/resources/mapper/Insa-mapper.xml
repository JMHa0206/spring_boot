<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kedu.study.dao.InsaDAO">

	<!-- 1. 주간 근무 통계 -->
	<select id="getWeeklyStats" resultType="java.util.Map">
		SELECT
		COUNT(*) AS worked_days,
		SUM(work_hours) AS total_hours,
		SUM(overtime_hours) AS overtime_hours
		FROM attendance
		WHERE emp_loginId = #{userId}
		AND record_date BETWEEN TRUNC(SYSDATE, 'IW') AND TRUNC(SYSDATE, 'IW') +
		6
	</select>

	<!-- 2. 평균 출근 시간 -->
	<select id="getAvgCheckIn" resultType="string">
		SELECT TO_CHAR(
		TO_DATE(
		LPAD(FLOOR(AVG(minutes)), 2, '0') || ':' ||
		LPAD(MOD(FLOOR(AVG(minutes)), 60), 2, '0'),
		'HH24:MI'
		),
		'HH24:MI'
		) AS avg_check_in
		FROM (
		SELECT
		(TO_NUMBER(TO_CHAR(check_in_time, 'HH24')) * 60 +
		TO_NUMBER(TO_CHAR(check_in_time, 'MI'))) AS minutes
		FROM attendance
		WHERE emp_loginId = #{userId}
		AND check_in_time IS NOT NULL
		AND REGEXP_LIKE(TO_CHAR(check_in_time, 'HH24MI'), '^\d{4}$')
		AND record_date BETWEEN TRUNC(SYSDATE, 'IW') AND TRUNC(SYSDATE, 'IW') +
		6
		)
	</select>


	<!-- 3. 평균 퇴근 시간 -->
	<select id="getAvgCheckOut" resultType="string">
		SELECT TO_CHAR(
		TO_DATE(
		LPAD(FLOOR(AVG(minutes)), 2, '0') || ':' ||
		LPAD(MOD(FLOOR(AVG(minutes)), 60), 2, '0'),
		'HH24:MI'
		),
		'HH24:MI'
		) AS avg_check_out
		FROM (
		SELECT
		(TO_NUMBER(TO_CHAR(check_out_time, 'HH24')) * 60 +
		TO_NUMBER(TO_CHAR(check_out_time, 'MI'))) AS minutes
		FROM attendance
		WHERE emp_loginId = #{userId}
		AND check_out_time IS NOT NULL
		AND REGEXP_LIKE(TO_CHAR(check_out_time, 'HH24MI'), '^\d{4}$')
		AND record_date BETWEEN TRUNC(SYSDATE, 'IW') AND TRUNC(SYSDATE, 'IW') +
		6
		)
	</select>


	<!-- 4. 연속 근무 일수 -->
	<select id="getConsecutiveWorkDays" resultType="Integer">
		SELECT MAX(consecutive_days)
		FROM (
		SELECT COUNT(*) AS consecutive_days
		FROM (
		SELECT record_date, ROW_NUMBER() OVER (ORDER BY record_date) -
		RANK() OVER (ORDER BY record_date - ROWNUM) grp
		FROM attendance
		WHERE emp_loginId = #{userId}
		AND check_in_time IS NOT NULL
		AND record_date >= TRUNC(SYSDATE) - 14
		)
		GROUP BY grp
		)
	</select>

	<!-- 5. 연차 정보 요약 -->
	<select id="getAnnualSummary" resultType="java.util.Map">
		SELECT
		total_days AS total,
		used_days AS used,
		(total_days - used_days) AS remaining,
		CASE
		WHEN expired_date BETWEEN SYSDATE AND LAST_DAY(ADD_MONTHS(SYSDATE, 12 -
		EXTRACT(MONTH FROM SYSDATE)))
		THEN (total_days - used_days)
		ELSE 0
		END AS expiring
		FROM EMPLOYEE_ANNUAL
		WHERE parent_emp_id = #{userId}
		AND year = EXTRACT(YEAR FROM SYSDATE)
	</select>

</mapper>
