<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="MsgEmp">

	<select id="select" resultType="com.kedu.study.dto.MsgEmpDTO">
		SELECT e.emp_code_id AS emp_code_id, e.emp_name AS emp_name, d.dept_name AS dept_name
		FROM employee e
		JOIN department d 
		ON e.emp_dept_id = d.dept_id
	</select>
	
	<select id="selectMine" resultType="com.kedu.study.dto.MsgEmpMineDTO">
		select emp_code_id,emp_dept_id,emp_name from employee where emp_loginid = #{userId}
	</select>
	
	<insert id="madeChatRoom" parameterType="map">
		insert into msg values(chatroom_seq.nextval,#{targetname},#{myname},concat(concat(#{targetname}, ','),#{myname}) ,2)
		<selectKey order="AFTER" keyProperty="seq" resultType="int">
        select chatroom_seq.currval from dual
    	</selectKey>
	</insert>
	
	<select id="checkIfExists" parameterType="map" resultType="int">
   SELECT COUNT(*) 
    FROM msg
    WHERE group_member = CONCAT(CONCAT(#{targetname}, ','), #{myname})
       OR group_member = CONCAT(CONCAT(#{myname}, ','), #{targetname})
	</select>
	
	<select id="checkRoomSeqExist" resultType="map">
    SELECT msg_group_id
    FROM msg
     WHERE group_member = CONCAT(CONCAT(#{targetId}, ','), #{myId})
       OR group_member = CONCAT(CONCAT(#{myId}, ','), #{targetId})
	</select>
	
	<select id="showMessages" resultType="com.kedu.study.dto.MessageDTO">
     SELECT 
        m.msg_id,
        m.msg_group_id,
        m.msg_emp_id, 
        m.msg_content,
        m.send_date,
        m.unread_count,
        e.emp_name
    FROM messages m
    JOIN msg g ON m.msg_group_id = g.msg_group_id
    JOIN employee e ON m.msg_emp_id = e.emp_code_id
    WHERE m.msg_group_id = #{seq}
    ORDER BY m.msg_id ASC
	</select>
	
	<select id="selectMyId" resultType="int">
		select emp_code_id from employee where emp_loginid = #{userId}
	</select>
	
	<select id="selectRoom" resultType="map">
		SELECT 
	e.EMP_NAME,
	e.EMP_CODE_ID,
	m1.SEND_DATE LAST_SEND_DATE,
	m1.MSG_CONTENT LAST_MSG
FROM (
	SELECT 
		REGEXP_SUBSTR(g.GROUP_MEMBER, '[^,]+', 1, LEVEL) EMP_ID,
		g.MSG_GROUP_ID
	FROM MSG g
	WHERE g.NUM_MEMBERS = 2
		AND CONCAT(CONCAT(',', g.GROUP_MEMBER), ',') LIKE CONCAT(CONCAT('%,', #{myId}), ',%')
	CONNECT BY REGEXP_SUBSTR(g.GROUP_MEMBER, '[^,]+', 1, LEVEL) IS NOT NULL
		AND PRIOR g.MSG_GROUP_ID = g.MSG_GROUP_ID
		AND PRIOR DBMS_RANDOM.VALUE IS NOT NULL
) member
JOIN EMPLOYEE e ON TO_NUMBER(member.EMP_ID) = e.EMP_CODE_ID
JOIN (
	SELECT m1.MSG_GROUP_ID, m1.SEND_DATE, m1.MSG_CONTENT
	FROM MESSAGES m1
	JOIN (
		SELECT MSG_GROUP_ID, MAX(SEND_DATE) MAX_DATE
		FROM MESSAGES
		GROUP BY MSG_GROUP_ID
	) m2 ON m1.MSG_GROUP_ID = m2.MSG_GROUP_ID AND m1.SEND_DATE = m2.MAX_DATE
) m1 ON member.MSG_GROUP_ID = m1.MSG_GROUP_ID
WHERE TO_NUMBER(member.EMP_ID) != #{myId}
ORDER BY m1.SEND_DATE DESC
	</select>
	
	<insert id="madeGroupChat" parameterType="map">
	<selectKey keyProperty="seq" resultType="int" order="AFTER">
        SELECT chatroom_seq.currval FROM dual
    </selectKey>
		insert into msg values(chatroom_seq.nextval,#{combinedStr},#{myId},#{combinedStr},#{numMembers})		
	</insert>
	
	<select id="selectGroupChat" parameterType="int" resultType="com.kedu.study.dto.ChattingRoomDTO">
		 SELECT 
        m.msg_group_id,
        m.group_member
    	FROM msg m
    	JOIN messages ms ON m.msg_group_id = ms.msg_group_id
    	WHERE INSTR(',' || group_member || ',', ',' || #{myId} || ',') > 0
    	AND num_members >= 3
    	group by m.msg_group_id,m.group_member
    	having count(ms.msg_id) >= 1
	</select>
	
	<select id="getNamesIds" parameterType="list" resultType="string">
    SELECT EMP_NAME
    FROM EMPLOYEE
    WHERE EMP_code_ID IN
    <foreach item="id" collection="list" open="(" separator="," close=")">
        #{id}
    </foreach>
	</select>
	
	<select id="getGroupInfo" resultType="map" parameterType="list">
   SELECT
        mg.msg_group_id AS groupId,
        ms.msg_content AS last_message,
        ms.send_date AS last_message_time,
        m.num_members
    FROM
        (SELECT
            msg_group_id,
            MAX(send_date) AS latest_time
         FROM messages
         WHERE msg_group_id IN
         <foreach item="id" collection="list" open="(" separator="," close=")">
            #{id}
         </foreach>
         GROUP BY msg_group_id) mg
    JOIN messages ms
        ON mg.msg_group_id = ms.msg_group_id AND mg.latest_time = ms.send_date
    JOIN msg m
        ON m.msg_group_id = mg.msg_group_id
	</select>
	
	<insert id="inviteToChat" parameterType="map">
	<selectKey keyProperty="seq" resultType="int" order="AFTER">
        SELECT chatroom_seq.currval FROM dual
    </selectKey>
		insert into msg values(chatroom_seq.nextval,#{mergedStr},#{myId},#{mergedStr},#{numMembers})
	</insert>
	
		
</mapper>